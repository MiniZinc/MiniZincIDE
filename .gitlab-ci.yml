stages:
  - build
  - package
  - publish

default:
  interruptible: true

# ----------- Build MiniZincIDE -----------

build:linux:
  stage: build
  image: minizinc/build-environment:qt
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_STRATEGY: clone
  script:
    - mkdir -p build; cd build
    - qmake -makefile "CONFIG+=bundled" "DEFINES+=MINIZINC_IDE_BUILD=\\\\\\\"\"${CI_PIPELINE_ID}\\\\\\\"\"" PREFIX=/usr ../MiniZincIDE/MiniZincIDE.pro
    - make -j4
    - make -j4 INSTALL_ROOT=../ide install; find ../ide/
    - cd ..
    # Download Gecode Gist so linuxdeployqt can include its dependencies
    - curl --location --header "PRIVATE-TOKEN:$ACCESS_TOKEN" --silent https://gitlab.com/api/v4/snippets/1796163/raw | tr -d '\r' > download.sh
    - sh download.sh vendor master gecode_gist:linux vendor.zip
    - unzip -q vendor.zip
    # Workaround for: https://github.com/probonopd/linuxdeployqt/issues/35
    - linuxdeployqt ide/usr/bin/MiniZincIDE -executable=vendor/gecode_gist/bin/fzn-gecode -bundle-non-qt-libs -no-translations -no-copy-copyright-files
    - mkdir ide/usr/lib_fallback
    - mv ide/usr/lib/libnss3.so ide/usr/lib/libnssutil3.so ide/usr/lib_fallback/
  tags: [linux, docker]
  artifacts:
    paths: [ide/]

build:osx:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_STRATEGY: clone
  script:
    - mkdir -p build; cd build
    - qmake -makefile "CONFIG+=bundled" "DEFINES+=MINIZINC_IDE_BUILD=\\\\\\\"\"${CI_PIPELINE_ID}\\\\\\\"\"" ../MiniZincIDE/MiniZincIDE.pro
    - make -j4
    - cp -r MiniZincIDE.app ..
  tags: [osx, cpp, qt]
  artifacts:
    paths: [MiniZincIDE.app]

build:win64:
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - if not exist "build" mkdir build
    - if not exist "ide" mkdir ide
    - cd build
    - qmake "CONFIG+=bundled" "DEFINES+=MINIZINC_IDE_BUILD=\\\\\\\"\"%CI_PIPELINE_ID%\\\\\\\"\"" ../MiniZincIDE/MiniZincIDE.pro
    - nmake
    - cp release/MiniZincIDE.exe ../ide
    - cd ../ide
    - windeployqt --no-translations --no-compiler-runtime --no-system-d3d-compiler MiniZincIDE.exe
  tags: [win64, cpp, qt]
  artifacts:
    paths: [ide/]

# ----------- MiniZinc Packaging -----------
.packaging_setup: &packaging_setup
  before_script:
    ### Set the MZNVERSION variable
    - 'if [ -n "$CI_COMMIT_TAG" ]; then MZNVERSION="$CI_COMMIT_TAG"; else MZNVERSION="build$CI_PIPELINE_ID"; fi'
    ### Choose the MiniZinc compiler branch
    - 'if [ -n "$CI_COMMIT_TAG" ]; then MZNREF="$CI_COMMIT_TAG"; elif [ "$CI_COMMIT_REF_NAME" = "master" ]; then MZNREF="master"; else MZNREF="develop"; fi'
    ### Choose the FindMUS branch
    - 'if  [ -n "$CI_COMMIT_TAG" ] || [ "$CI_COMMIT_REF_NAME" = "master" ]; then FINDMUSREF="master"; else FINDMUSREF="develop"; fi'
    ### Download Dependencies
    - curl --silent -o minizinc.zip --location --header "PRIVATE-TOKEN:$ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/minizinc%2Fminizinc/jobs/artifacts/$MZNREF/download?job=build:$MZNARCH"
    - unzip -q minizinc.zip
    - '[ ${DOWNLOAD_SOLVERS:-1} -eq 1 ] && curl --silent -o vendor.zip --location --header "PRIVATE-TOKEN:$ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/minizinc%2Fvendor/jobs/artifacts/master/download?job=bundle:$MZNARCH" && unzip -q vendor.zip'
    - '[ ${DOWNLOAD_GLOBALIZER:-0} -eq 1 ] && curl --silent -o globalizer.zip --location --header "PRIVATE-TOKEN:$ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/minizinc%2FGlobalizer/jobs/artifacts/master/download?job=build:$MZNARCH" && unzip -q globalizer.zip'
    - '[ ${DOWNLOAD_FINDMUS:-0} -eq 1 ] && curl --silent -o findmus.zip --location --header "PRIVATE-TOKEN:$ACCESS_TOKEN" "https://gitlab.com/api/v4/projects/minizinc%2FFindMUS/jobs/artifacts/$FINDMUSREF/download?job=build:$MZNARCH" && unzip -q findmus.zip'

package:linux:
  stage: package
  image: minizinc/build-environment:package
  variables:
    MZNARCH: "linux"
    DOWNLOAD_GLOBALIZER: 1
    DOWNLOAD_FINDMUS: 1
  <<: *packaging_setup
  script:
    - PACKAGE=MiniZincIDE-${MZNVERSION}-bundle-linux-x86_64
    - mkdir -p $PACKAGE/
    ### Package IDE
    - mv ide/usr/* $PACKAGE/
    - cp resources/scripts/MiniZincIDE.sh $PACKAGE/
    ### Package MiniZinc
    - mv minizinc/bin/* $PACKAGE/bin/
    - mv minizinc/share $PACKAGE/share
    ### Package vendor solvers
    - mv vendor/gecode/bin/fzn-gecode $PACKAGE/bin/
    - mv vendor/gecode_gist/bin/fzn-gecode $PACKAGE/bin/fzn-gecode-gist
    - mv vendor/gecode/share/gecode/mznlib $PACKAGE/share/minizinc/gecode
    - mv vendor/chuffed/bin/fzn-chuffed $PACKAGE/bin/
    - mv vendor/chuffed/share/minizinc/* $PACKAGE/share/minizinc/
    ### Package Globalizer
    - mv globalizer/bin/minizinc-globalizer $PACKAGE/bin/
    - mv globalizer/share/globalizer/mznlib $PACKAGE/share/minizinc/globalizer
    ### Package findMUS
    - mv findMUS/bin/findMUS $PACKAGE/bin/
    ### Package solver scripts
    - cp resources/scripts/run-fzn-gecode-gist $PACKAGE/bin/
    ### Package default settings
    - mkdir -p $PACKAGE/share/minizinc/solvers/
    - cp resources/solvers/*.msc $PACKAGE/share/minizinc/solvers/
    ### Strip included binaries
    - (cd $PACKAGE/bin; strip minizinc fzn-gecode fzn-gecode-gist fzn-chuffed findMUS minizinc-globalizer mzn2doc)
    - cp resources/misc/README $PACKAGE
    ### Compress package
    - tar -czf $PACKAGE.tgz $PACKAGE
    ### Generate checksum
    - sha256sum $PACKAGE.tgz > $PACKAGE.sha256
  artifacts:
    name: "minizinc_bundle_linux_${CI_PIPELINE_ID}"
    paths: [MiniZincIDE*.tgz, MiniZincIDE*.sha256]
  needs: ["build:linux"]
  tags: [linux, docker]

package:osx:
  stage: package
  variables:
    MZNARCH: "osx"
    DOWNLOAD_GLOBALIZER: 1
    DOWNLOAD_FINDMUS: 1
  <<: *packaging_setup
  script:
    - "DIR=MiniZincIDE.app/Contents/Resources; MZNDIR=$DIR/share/minizinc"
    - mkdir -p $MZNDIR/solvers
    ### Package MiniZinc
    - mv minizinc/bin/* $DIR/
    - mv minizinc/share/minizinc/* $MZNDIR/
    ### Package vendor solvers
    - mkdir -p $DIR/bin/
    - mv vendor/gecode/bin/fzn-gecode $DIR/bin/
    - mv vendor/gecode_gist/bin/fzn-gecode $DIR/bin/fzn-gecode-gist
    - mv vendor/gecode/share/gecode/mznlib $MZNDIR/gecode
    - cp resources/misc/osx-gecode-qt.conf $DIR/bin/qt.conf

    - mv vendor/chuffed/bin/fzn-chuffed $DIR/bin/
    - mv vendor/chuffed/share/minizinc/* $MZNDIR/
    ### Package Globalizer
    - mv globalizer/bin/minizinc-globalizer $DIR/bin/
    - mv globalizer/share/globalizer/mznlib $MZNDIR/globalizer
    ### Package findMUS
    - mv findMUS/bin/findMUS $DIR/bin/
    ### Package solver scripts
    - cp resources/scripts/run-fzn-gecode-gist $DIR/bin/
    ### Package default settings
    - cp resources/solvers/*.msc $MZNDIR/solvers
    ### Strip included binaries
    - (cd $DIR; strip minizinc mzn2doc)
    - (cd $DIR/bin; strip fzn-gecode fzn-gecode-gist fzn-chuffed findMUS minizinc-globalizer)
    ### Run automated Qt deployment tool
    - macdeployqt ./MiniZincIDE.app -executable=$DIR/bin/fzn-gecode-gist
  artifacts:
    name: "minizinc_bundle_mac_${CI_PIPELINE_ID}"
    paths: [MiniZincIDE.app]
  needs: ["build:osx"]
  tags: [osx, qt]

package:win64:
  stage: package
  variables:
    MZNARCH: "win64"
    ISSARCH: "x64"
    ISSARCHALLOWED: "x64"
  before_script:
    ### Set redist variables
    - set MSVCREDIST=%VCToolsRedistDir%\x64\Microsoft.VC141.CRT
    - set UCRTREDIST=%WindowsSdkDir%\Redist\ucrt\DLLs\x64
    ### Set the MZNVERSION variable
    - if defined CI_COMMIT_TAG (set MZNVERSION=%CI_COMMIT_TAG%) else (set MZNVERSION=%CI_PIPELINE_ID%)
    ### Choose the MiniZinc compiler branch
    - if defined CI_COMMIT_TAG (set MZNREF=%CI_COMMIT_TAG%) else if %CI_COMMIT_REF_NAME%==master (set MZNREF=master) else (set MZNREF=develop)
    - if defined CI_COMMIT_TAG (set FINDMUSREF=master) else if %CI_COMMIT_REF_NAME%==master (set FINDMUSREF=master) else (set FINDMUSREF=develop)
    ### Download Dependencies
    - curl --silent -o minizinc.zip --location --header "PRIVATE-TOKEN:%ACCESS_TOKEN%" "https://gitlab.com/api/v4/projects/minizinc%%2Fminizinc/jobs/artifacts/%MZNREF%/download?job=build:%MZNARCH%"
    - unzip -q minizinc.zip
    - curl --silent -o vendor.zip --location --header "PRIVATE-TOKEN:%ACCESS_TOKEN%" "https://gitlab.com/api/v4/projects/minizinc%%2Fvendor/jobs/artifacts/master/download?job=bundle:%MZNARCH%"
    - unzip -q vendor.zip
    - curl --silent -o globalizer.zip --location --header "PRIVATE-TOKEN:%ACCESS_TOKEN%" "https://gitlab.com/api/v4/projects/minizinc%%2Fglobalizer/jobs/artifacts/master/download?job=build:%MZNARCH%"
    - unzip -q globalizer.zip
    - curl --silent -o findmus.zip --location --header "PRIVATE-TOKEN:%ACCESS_TOKEN%" "https://gitlab.com/api/v4/projects/minizinc%%2FFindMus/jobs/artifacts/%FINDMUSREF%/download?job=build:%MZNARCH%"
    - unzip -q findmus.zip
  script:
    - '"C:/Program Files (x86)/Inno Setup 6/ISCC.exe" /dMyAppVersion="%MZNVERSION%" /dMyMZNVersion="%MZNVERSION%" /dMyAppDirectory="%CI_PROJECT_DIR%" /dMyMSVCRedist="%MSVCREDIST%" /dMyUCRTRedist="%UCRTREDIST%" /dMyAPPArch="%MZNARCH%" /dMyApp64Bit="%ISSARCH%" /dMyAppArchitectures="%ISSARCHALLOWED%" /O"%CI_PROJECT_DIR%" resources/pkg_config/minizinc-bundle.iss'
    ### Generate checksum
    - certutil -hashfile MiniZincIDE-%MZNVERSION%-bundled-setup-%MZNARCH%.exe SHA256 > MiniZincIDE-%MZNVERSION%-bundled-setup-%MZNARCH%.sha256
  artifacts:
    name: "minizinc_bundle_windows_%CI_PIPELINE_ID%"
    paths: [MiniZincIDE*.exe, MiniZincIDE*.sha256]
  needs: ["build:win64"]
  tags: [win64]

package:appimage:
  stage: package
  image: minizinc/build-environment:appimage
  variables:
    MZNARCH: "linux"
    DOWNLOAD_GLOBALIZER: 1
    DOWNLOAD_FINDMUS: 1
    PACKAGE: "MiniZinc.AppDir"
  <<: *packaging_setup
  script:
    - mkdir -p $PACKAGE/usr/
    ### Package IDE
    - mv ide/usr/* $PACKAGE/usr/
    ### Package MiniZinc
    - mv minizinc/bin/* $PACKAGE/usr/bin/
    - mv minizinc/share $PACKAGE/usr/share
    ### Package vendor solvers
    - mv vendor/gecode/bin/fzn-gecode $PACKAGE/usr/bin/
    - mv vendor/gecode_gist/bin/fzn-gecode $PACKAGE/usr/bin/fzn-gecode-gist
    - mv vendor/gecode/share/gecode/mznlib $PACKAGE/usr/share/minizinc/gecode

    - mv vendor/chuffed/bin/fzn-chuffed $PACKAGE/usr/bin/
    - cp -r vendor/chuffed/share/minizinc/* $PACKAGE/usr/share/minizinc/
    ### Package Globalizer
    - mv globalizer/bin/minizinc-globalizer $PACKAGE/usr/bin/
    - mv globalizer/share/globalizer/mznlib $PACKAGE/usr/share/minizinc/globalizer
    ### Package findMUS
    - mv findMUS/bin/findMUS $PACKAGE/usr/bin/
    ### Package solver scripts
    - cp resources/scripts/run-fzn-gecode-gist $PACKAGE/usr/bin/
    ### Package default settings
    - mkdir -p $PACKAGE/usr/share/minizinc/solvers/
    - cp resources/solvers/*.msc $PACKAGE/usr/share/minizinc/solvers/
    ### Strip included binaries
    - (cd $PACKAGE/usr/bin; strip minizinc fzn-gecode fzn-gecode-gist fzn-chuffed findMUS minizinc-globalizer mzn2doc)
    - cp resources/misc/README $PACKAGE
    ### Assemble AppImage
    - cp resources/scripts/AppRun $PACKAGE
    - cp resources/misc/minizinc.desktop $PACKAGE/minizinc.desktop
    - cp resources/icon.png $PACKAGE/minizinc.png
    - ARCH=x86_64 appimagetool $PACKAGE MiniZincIDE-${MZNVERSION}-x86_64.AppImage
    ### Generate checksum
    - sha256sum MiniZincIDE*.AppImage > MiniZincIDE-${MZNVERSION}-x86_64.sha256
  artifacts:
    name: "minizinc_appimage_${CI_PIPELINE_ID}"
    paths: [MiniZincIDE*.AppImage, MiniZincIDE*.sha256]
  needs: ["build:linux"]
  tags: [linux, docker]

package:docker_alpine:
  stage: package
  parallel: 2
  variables:
    MZNARCH: "musl"
  <<: *packaging_setup
  script:
    - BASES=("null" "alpine:latest" "alpine:3.11")
    - EXTS=("null" "-alpine" "-alpine3.11")
    - echo "Building image based on \"${BASES[$CI_NODE_INDEX]}\" with tag extension \"${EXTS[$CI_NODE_INDEX]}\""
    - HASH="$(docker build -f resources/pkg_config/Dockerfile --build-arg BASE=${BASES[$CI_NODE_INDEX]} -q .)"
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag ${HASH} minizinc/minizinc:${CI_COMMIT_TAG}${EXTS[$CI_NODE_INDEX]} && docker push minizinc/minizinc:${CI_COMMIT_TAG}${EXTS[$CI_NODE_INDEX]}; fi
    - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then docker tag ${HASH} minizinc/minizinc:latest${EXTS[$CI_NODE_INDEX]} && docker push minizinc/minizinc:latest${EXTS[$CI_NODE_INDEX]}; fi
    - if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then docker tag ${HASH} minizinc/minizinc:edge${EXTS[$CI_NODE_INDEX]} && docker push minizinc/minizinc:edge${EXTS[$CI_NODE_INDEX]}; fi
  needs: []
  only: [tags, master, develop]
  tags: [docker-cli]

package:docker_ubuntu:
  stage: package
  parallel: 3
  variables:
    MZNARCH: "linux"
  <<: *packaging_setup
  script:
    - BASES=("null" "ubuntu:latest" "ubuntu:bionic" "ubuntu:xenial")
    - EXTS=("null" "" "-bionic" "-xenial")
    - echo "Building image based on \"${BASES[$CI_NODE_INDEX]}\" with tag extension \"${EXTS[$CI_NODE_INDEX]}\""
    - HASH="$(docker build -f resources/pkg_config/Dockerfile --build-arg BASE=${BASES[$CI_NODE_INDEX]} -q .)"
    - echo $HASH
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag ${HASH} minizinc/minizinc:${CI_COMMIT_TAG}${EXTS[$CI_NODE_INDEX]} && docker push minizinc/minizinc:${CI_COMMIT_TAG}${EXTS[$CI_NODE_INDEX]}; fi
    - if [ "$CI_COMMIT_REF_NAME" = "master" ]; then docker tag ${HASH} minizinc/minizinc:latest${EXTS[$CI_NODE_INDEX]} && docker push minizinc/minizinc:latest${EXTS[$CI_NODE_INDEX]}; fi
    - if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then docker tag ${HASH} minizinc/minizinc:edge${EXTS[$CI_NODE_INDEX]} && docker push minizinc/minizinc:edge${EXTS[$CI_NODE_INDEX]}; fi
  needs: []
  only: [tags, master, develop]
  tags: [docker-cli]


.snap_job: &snap_job
  stage: package
  image: minizinc/build-environment:snap
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    MZNARCH: "linux"
    DOWNLOAD_GLOBALIZER: 1
    DOWNLOAD_FINDMUS: 1
  <<: *packaging_setup
  script:
    - strip minizinc/bin/minizinc vendor/gecode/bin/fzn-gecode vendor/gecode_gist/bin/fzn-gecode vendor/chuffed/bin/fzn-chuffed findMUS/bin/findMUS globalizer/bin/minizinc-globalizer minizinc/bin/mzn2doc
    - cp resources/pkg_config/snapcraft.yaml .
    - apt-get update -y
    - snapcraft
  artifacts:
    name: "minizinc_snap_${CI_PIPELINE_ID}"
    paths: [minizinc*.snap]
  needs: ["build:linux"]
  tags: [linux, docker]

package:snap:
  <<: *snap_job
  only: [tags, master, develop]

package:snap_manual:
  <<: *snap_job
  except: [tags, master, develop]
  when: manual

.snap_publish: &snap_publish
  stage: publish
  image: minizinc/build-environment:snap
  tags: [linux, docker]
  script:
    - snapcraft login --with $SNAPCRAFT_LOGIN
    - snapcraft upload minizinc*.snap --release $SNAPCRAFT_CHANNEL
  needs: ["package:snap"]

publish:snap_edge:
  variables:
    SNAPCRAFT_CHANNEL: edge
  <<: *snap_publish
  only: [develop]

publish:snap_stable:
  variables:
    SNAPCRAFT_CHANNEL: stable
  <<: *snap_publish
  only: [tags]
  when: manual # Don't publish to stable channel automatically
